/*
*  C Interface:	Interrupt.h
*
* Description: Interface to Interrupts, Exceptions, IRQLS
*
*
* Author: Puneet Kaushik <puneet.kaushik@gmail.com>, (C) 2010
*
* Copyright: See COPYRIGHT file that comes with this distribution
*
*/


#ifndef KOS_KERN_TRAP_H
#define KOS_KERN_TRAP_H

#include "ke.h"






/* Number of x86 interrupts. */
#define INTR_CNT 256

#define SYSEXCEPTION_START	0x0
#define SYSEXCEPTION_END		0x1f
#define IRQ_START				0x20
#define IRQ_END					0x3f
#define SYSCALL_INTR			0x40

//Different IRQs

#define IrqTimer					(IRQ_START + 0x0)
#define IrqKeyBoard				(IRQ_START + 0x1)

#define IrqSerial2					(IRQ_START + 0x3)
#define IrqSerial1					(IRQ_START + 0x4)
#define IrqParallel2				(IRQ_START + 0x5)
#define IrqFloppy					(IRQ_START + 0x6)
#define IrqParallel1				(IRQ_START + 0x7)
#define IrqRTC					(IRQ_START + 0x8)

#define IrqMouse					(IRQ_START + 0x12)

#define IrqPrimaryIDE				(IRQ_START + 0x14)
#define IrqSecondaryIDE			(IRQ_START + 0x15)




#define IsDeviceInterrupt(vector)		((vector) >= IRQ_START && (vector) <= IRQ_END)
#define IsSystemException(vector)	((vector) >= SYSEXCEPTION_START && 	\
											(vector) <= SYSEXCEPTION_END)
#define IsSystemCallIntr(vector)		((vector) == SYSCALL_INTR)

// Trap numbers
// These are processor defined:
#define T_DIVIDE     0		// divide error
#define T_DEBUG      1		// debug exception
#define T_NMI        2		// non-maskable interrupt
#define T_BRKPT      3		// breakpoint
#define T_OFLOW      4		// overflow
#define T_BOUND      5		// bounds check
#define T_INVOP      6		// illegal opcode
#define T_DEVICE     7		// device not available 
#define T_DBLFLT     8		// double fault
#define T_COPROC  9 		// reserved (not generated by recent processors)
#define T_INVTSS       10		// invalid task switch segment
#define T_SEGNP     11		// segment not present
#define T_STACK     12		// stack exception
#define T_GPFLT     13		// genernal protection fault
#define T_PGFLT     14		// page fault
#define T_RES    15 	// reserved
#define T_FPERR     16		// floating point error
#define T_ALIGN     17		// aligment check
#define T_MCHK      18		// machine check
#define T_SIMDERR   19		// SIMD floating point error

// These are arbitrarily chosen, but with care not to overlap
// processor defined exceptions or interrupt vectors.
#define T_SYSCALL   48		// system call
#define T_DEFAULT   500		// catchall

//#ifndef __ASSEMBLER__

#include <inc/types.h>



/* registers as pushed by pusha */

typedef struct _GENERALREGISTERS {
	ULONG_PTR Reg_edi;
	ULONG_PTR Reg_esi;
	ULONG_PTR Reg_ebp;
	ULONG_PTR Reg_oesp;		//Temp ESP
	ULONG_PTR Reg_ebx;
	ULONG_PTR Reg_edx;
	ULONG_PTR Reg_ecx;
	ULONG_PTR Reg_eax;
}GENERALREGISTERS, *PGENERALREGISTERS;

typedef struct _KTRAPFRAME {
	GENERALREGISTERS TrapFrame_regs;
	USHORT TrapFrame_es;
	USHORT TrapFrame_padding1;
	USHORT TrapFrame_ds;
	USHORT TrapFrame_padding2;
	ULONG_PTR TrapFrame_trapno;
	/* below here defined by x86 hardware */
	ULONG_PTR TrapFrame_err;
	ULONG_PTR TrapFrame_eip;
	USHORT TrapFrame_cs;
	USHORT TrapFrame_padding3;
	ULONG_PTR TrapFrame_eflags;
	/* below here only when crossing rings, such as from user to kernel */
	ULONG_PTR TrapFrame_esp;
	USHORT TrapFrame_ss;
	USHORT TrapFrame_padding4;
}KTRAPFRAME, *PKTRAPFRAME;



typedef 
VOID 
(*PINTERRUPT_HANDLER) 
			( IN PKTRAPFRAME TrapFrame);



//#endif /* !__ASSEMBLER__ */



#endif /* KOS_KERN_TRAP_H */
